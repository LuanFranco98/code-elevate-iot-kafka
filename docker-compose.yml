services:
  kafka:
    image: bitnami/kafka:3.8.0
    restart: on-failure
    ports:
      - 9092:9092
    environment:
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "true"

      # BROKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # For single broker, set to 1. For a cluster, set to N-1 or N (e.g., 3)
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Same as above
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1 # Same as above
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1 # Default for auto-created topics (if auto.create.topics.enable=true)
      KAFKA_MIN_IN_SYNC_REPLICAS: 1 # Minimum in-sync replicas for writes to succeed (if acks=all)
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false" # HIGHLY RECOMMENDED: Prioritize consistency over availability
      KAFKA_LOG_RETENTION_HOURS: 168 # 7 days (default is often much higher like 168, 7*24)
      KAFKA_LOG_RETENTION_BYTES: 1073741824 # 1GB (adjust as needed, 1073741824 bytes = 1 GB)
      KAFKA_NUM_PARTITIONS: 1 # Default partitions for auto-created topics (better to define per topic)
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - zookeeper
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: code-elevate
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  producer:
    container_name: producer
    build:
      context: ./producer
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka

  consumer:
    container_name: consumer
    build:
      context: ./consumer
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka
      - redis
      - postgres
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_USER: iotuser
      POSTGRES_PASSWORD: iotpass
      POSTGRES_DB: iotdb
      POSTGRES_HOST: postgres

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
  postgres:
    container_name: postgres
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: iotuser
      POSTGRES_PASSWORD: iotpass
      POSTGRES_DB: iotdb
    volumes:
      - pgdata:/var/lib/postgresql/data #pedir o gpt pra explicar isso aqui depois
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql #pedir o gpt pra explicar isso aqui depois

volumes:
  pgdata: